bool empty(int board[][9],int &row,int &col){
for(int i=0;i<9;i++){
	for(int j=0;j<9;j++)
        if(board[i][j]==0){
            
         row=i;
            col=j;
            return true;
        }
	}
    return false;
}
bool safe(int board[][9],int row,int col,int num){
   bool r=true,c=true,b=true;
   
    for(int i=0;i<9;i++){
		if(board[i][col]==num && i!=row)
        {
            r=false;
            break;
        }
    }
    for(int i=0;i<9;i++){
		if(board[row][i]==num && i!=col)
        {
			c=false;
			break;
        }
    }
    int rf=row-row%3;
    int cf=col-col%3;
    for(int i=0;i<3;i++)
    {
		for(int j=0;j<3;j++)
        {
			if(board[i+rf][j+cf]==num && i+rf!=row &&j+cf!=col){
                b=false;
            break;
            }
        }
    }
   return r&&c&&b;
}
bool sudokuSolver(int board[][9]){

  /* Don't write main().
   *  Don't read input, it is passed as function argument.
   *  Don't print output and return output as specified in the question
  */
   int row,col;
   if(!empty(board,row,col))
       return true;
    for(int i=1;i<=9;i++){
		if(safe(board,row,col,i)){
            board[row][col]=i;
			if(sudokuSolver(board))
                return true;
            board[row][col]=0;
        	}
    }
    return false;

}
